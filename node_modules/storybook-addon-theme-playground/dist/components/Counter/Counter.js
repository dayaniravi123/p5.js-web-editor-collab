import React, { useState } from 'react';
import StyledCounter from './Counter.style';
import Label from '../Label/Label';
var countDecimals = function (number) {
    if (Math.floor(number) === number)
        return 0;
    return number.toString().split('.')[1].length || 0;
};
var Counter = function (_a) {
    var label = _a.label, description = _a.description, _b = _a.min, min = _b === void 0 ? 0 : _b, _c = _a.max, max = _c === void 0 ? 100 : _c, _d = _a.steps, steps = _d === void 0 ? 1 : _d, onChange = _a.onChange, value = _a.value, suffix = _a.suffix, iconBefore = _a.iconBefore;
    var _e = useState(value), counterValue = _e[0], setCounterValue = _e[1];
    var fixedNumber = countDecimals(steps);
    var updateValue = function (val) {
        setCounterValue(val);
        onChange(val, suffix);
    };
    var handleChange = function (event) {
        var _a = event.target, eventValue = _a.value, validity = _a.validity;
        if (validity.valid) {
            setCounterValue(eventValue);
        }
    };
    var handleBlur = function (event) {
        var eventValue = event.target.value;
        var numberValue = parseFloat(eventValue);
        if (numberValue > max) {
            updateValue(max);
        }
        else if (numberValue < min || Number.isNaN(numberValue)) {
            updateValue(min);
        }
        else {
            updateValue(numberValue);
        }
    };
    return (React.createElement(StyledCounter, null,
        React.createElement(Label, { iconBefore: iconBefore, label: label, description: description }),
        React.createElement("div", { className: "counter__counter" },
            React.createElement("button", { type: "button", onClick: function () {
                    return updateValue(counterValue - steps >= min
                        ? parseFloat((counterValue - steps).toFixed(fixedNumber))
                        : min);
                }, disabled: counterValue === min, "aria-label": "Decrease" },
                React.createElement("svg", { viewBox: "0 0 24 24", width: "24", height: "24" },
                    React.createElement("rect", { height: "2", rx: "1", width: "12", x: "6", y: "11" }))),
            React.createElement("span", null,
                React.createElement("input", { type: "text", pattern: "[0-9.]*", value: counterValue, onChange: handleChange, onBlur: handleBlur }),
                suffix),
            React.createElement("button", { type: "button", onClick: function () {
                    return updateValue(counterValue + steps <= max
                        ? parseFloat((counterValue + steps).toFixed(fixedNumber))
                        : max);
                }, disabled: counterValue === max, "aria-label": "Increase" },
                React.createElement("svg", { viewBox: "0 0 24 24", width: "24", height: "24" },
                    React.createElement("rect", { height: "2", rx: "1", width: "12", x: "6", y: "11" }),
                    React.createElement("rect", { height: "12", rx: "1", width: "2", x: "11", y: "6" }))))));
};
export default Counter;
