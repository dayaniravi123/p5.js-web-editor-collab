var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { is } from './';
var buildThemeComponents = function (theme, overrides, arr) {
    if (arr === void 0) { arr = []; }
    var themeComponents = {};
    var keys = Object.keys(theme);
    keys.forEach(function (key) {
        var value = theme[key];
        var path = __spreadArrays(arr, [key]);
        var pathString = path.join('.');
        // Return if component is hidden
        if (overrides[pathString] && overrides[pathString].hidden) {
            return;
        }
        if (overrides[pathString] && overrides[pathString].type) {
            themeComponents[pathString] = { type: overrides[pathString].type, value: value };
        }
        else if (is.object(value)) {
            if (is.shorthand(value)) {
                themeComponents[pathString] = { type: 'shorthand', value: value };
            }
            else {
                themeComponents = __assign(__assign({}, themeComponents), buildThemeComponents(value, overrides, path));
            }
        }
        else if (is.array(value)) {
            themeComponents = __assign(__assign({}, themeComponents), buildThemeComponents(value, overrides, path));
        }
        else if (is.boolean(value)) {
            themeComponents[pathString] = { type: 'switch', value: value };
        }
        else if (is.number(value)) {
            themeComponents[pathString] = { type: 'counter', value: value };
        }
        else if (is.string(value)) {
            if (is.color(value, key)) {
                themeComponents[pathString] = { type: 'colorpicker', value: value };
            }
            else if (is.unit(value)) {
                themeComponents[pathString] = { type: 'range', value: value };
            }
            else if (is.text(value)) {
                themeComponents[pathString] = { type: 'textarea', value: value };
            }
            else {
                themeComponents[pathString] = { type: 'input', value: value };
            }
        }
    });
    return themeComponents;
};
export default buildThemeComponents;
