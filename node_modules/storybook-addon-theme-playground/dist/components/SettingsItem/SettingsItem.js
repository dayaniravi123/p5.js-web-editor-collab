var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useContext } from 'react';
import { SettingsContext } from '../../contexts/SettingsProvider';
import { getLabel } from '../../helper';
import Colorpicker from '../ColorPicker/ColorPicker';
import Counter from '../Counter/Counter';
import Input from '../Input/Input';
import RadioGroup from '../RadioGroup/RadioGroup';
import Range from '../Range/Range';
import Select from '../Select/Select';
import Shorthand from '../Shorthand/Shorthand';
import Switch from '../Switch/Switch';
import Textarea from '../Textarea/Textarea';
import { StyledSettingsItem } from './SettingsItem.style';
import { stripUnit } from '../../helper/stripUnit';
var Component = function (_a) {
    var type = _a.type, path = _a.path, overrideProps = _a.overrideProps, props = _a.props, update = _a.update;
    var value = props.value, label = props.label;
    var _b = stripUnit(value), val = _b[0], unit = _b[1];
    switch (type) {
        case 'colorpicker':
            return (React.createElement(Colorpicker, __assign({ label: label, value: value, onChange: function (val) { return update(path, val); } }, overrideProps)));
        case 'counter':
            return (React.createElement(Counter, __assign({ label: label, suffix: unit, value: parseFloat(val), onChange: function (val, suffix) {
                    return update(path, suffix ? "" + val + suffix : val);
                } }, overrideProps)));
        case 'range':
            return (React.createElement(Range, __assign({ label: props.label, suffix: unit, value: parseFloat(val), onChange: function (val, suffix) {
                    return update(path, suffix ? "" + val + suffix : val);
                } }, overrideProps)));
        case 'input':
            return (React.createElement(Input, __assign({ label: label, value: value, onChange: function (val) { return update(path, val); } }, overrideProps)));
        case 'shorthand':
            return (React.createElement(Shorthand, __assign({ label: label, value: value, onChange: function (val) { return update(path, val); } }, overrideProps)));
        case 'switch':
            return (React.createElement(Switch, __assign({ label: label, value: value, onChange: function (val) { return update(path, val); } }, overrideProps)));
        case 'textarea':
            return (React.createElement(Textarea, __assign({ label: label, value: value, onChange: function (val) { return update(path, val); } }, overrideProps)));
        case 'select':
            return (React.createElement(Select, __assign({ label: label, value: value, onChange: function (val) { return update(path, val); } }, overrideProps)));
        case 'radio':
            return (React.createElement(RadioGroup, __assign({ label: label, value: value, name: label, onChange: function (val) { return update(path, val); } }, overrideProps)));
        default:
            return (React.createElement(Input, __assign({ label: label, value: value, onChange: function (val) { return update(path, val); } }, overrideProps)));
    }
};
var areEqual = function (prev, next) {
    var prevOverrideProps = prev.overrideProps ? prev.overrideProps : null;
    var nextOverrideProps = next.overrideProps ? next.overrideProps : null;
    return (prev.props.value === next.props.value &&
        JSON.stringify(prevOverrideProps) === JSON.stringify(nextOverrideProps));
};
export var MemoizedComponent = React.memo(Component, areEqual);
var SettingsItem = function () {
    var _a = useContext(SettingsContext), updateTheme = _a.updateTheme, overrides = _a.overrides, config = _a.config, themeComponents = _a.themeComponents, name = _a.activeTheme.name;
    var activeComponents = themeComponents[name] || null;
    return (React.createElement(React.Fragment, null, activeComponents &&
        Object.keys(activeComponents).map(function (path) {
            var _a = activeComponents[path], value = _a.value, type = _a.type;
            var label = getLabel(path, config.labelFormat);
            var props = {
                value: value,
                label: label,
            };
            var componentProps = {
                type: type,
                path: path,
                props: props,
                overrideProps: overrides[path],
                update: updateTheme,
            };
            return activeComponents[path] ? (React.createElement(StyledSettingsItem, { key: path },
                React.createElement(MemoizedComponent, __assign({}, componentProps)))) : null;
        })));
};
export default SettingsItem;
