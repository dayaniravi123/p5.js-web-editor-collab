import * as startCase from 'lodash.startcase';
import defaultCssColors from './defaultCssColors';
export var getLabel = function (label, format) {
    var path = label.split('.');
    if (typeof format === 'function') {
        return format(path);
    }
    if (format === 'startCase') {
        return startCase(label);
    }
    if (format === 'path') {
        return label;
    }
    return label;
};
export var is = {
    color: function (v, l) {
        if (l === void 0) { l = ''; }
        return (v.startsWith('#') && (v.length === 4 || v.length === 7)) ||
            v.startsWith('rgb(') ||
            v.startsWith('rgba(') ||
            v.startsWith('hsl(') ||
            defaultCssColors.includes(v.toLowerCase()) ||
            l.toLowerCase().includes('color');
    },
    number: function (v) { return typeof v === 'number'; },
    string: function (v) { return typeof v === 'string'; },
    object: function (v) { return typeof v === 'object'; },
    array: function (v) { return Array.isArray(v); },
    boolean: function (v) { return typeof v === 'boolean' || v === 'true' || v === 'false'; },
    unit: function (v) {
        return v.endsWith('px') ||
            v.endsWith('rem') ||
            v.endsWith('em') ||
            v.endsWith('%');
    },
    text: function (v) { return v.length >= 40; },
    shorthand: function (v) {
        var keys = Object.keys(v);
        return (keys.length === 4 &&
            keys.includes('top') &&
            keys.includes('bottom') &&
            keys.includes('right') &&
            keys.includes('left'));
    },
};
export var updateValueBasedOnPath = function (propertyPath, value, obj) {
    var newObj = obj;
    var properties = propertyPath.split('.');
    // Not yet at the last property so keep digging
    if (properties.length > 1) {
        // The property doesn't exists OR is not an object (and so we overwritte it) so we create it
        if (!Object.prototype.hasOwnProperty.call(obj, properties[0]) ||
            typeof obj[properties[0]] !== 'object')
            newObj[properties[0]] = {};
        // We iterate.
        return updateValueBasedOnPath(properties.slice(1).join('.'), value, obj[properties[0]]);
        // This is the last property - the one where to set the value
    }
    // We set the value to the last property
    newObj[properties[0]] = value;
    return true; // this is the end
};
export var getPrimaryColor = function (_a) {
    var theme = _a.theme;
    var _b, _c;
    return (theme === null || theme === void 0 ? void 0 : theme.base) === 'dark'
        ? (_b = theme === null || theme === void 0 ? void 0 : theme.color) === null || _b === void 0 ? void 0 : _b.lightest : (_c = theme === null || theme === void 0 ? void 0 : theme.color) === null || _c === void 0 ? void 0 : _c.darkest;
};
export var getSecondaryColor = function (_a) {
    var theme = _a.theme;
    var _b;
    return (_b = theme === null || theme === void 0 ? void 0 : theme.color) === null || _b === void 0 ? void 0 : _b.mediumdark;
};
export var getTextColor = function (theme) {
    var _a;
    return (_a = theme === null || theme === void 0 ? void 0 : theme.color) === null || _a === void 0 ? void 0 : _a.defaultText;
};
export var getInverseTextColor = function (_a) {
    var theme = _a.theme;
    var _b;
    return (_b = theme === null || theme === void 0 ? void 0 : theme.color) === null || _b === void 0 ? void 0 : _b.inverseText;
};
export var getBorderColor = function (_a) {
    var theme = _a.theme;
    var _b, _c;
    return (theme === null || theme === void 0 ? void 0 : theme.base) === 'dark' ? (_b = theme === null || theme === void 0 ? void 0 : theme.color) === null || _b === void 0 ? void 0 : _b.light : (_c = theme === null || theme === void 0 ? void 0 : theme.color) === null || _c === void 0 ? void 0 : _c.dark;
};
