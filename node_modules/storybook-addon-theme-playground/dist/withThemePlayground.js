var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* eslint-disable react/display-name */
import React from 'react';
import addons from '@storybook/addons';
import events from './events';
var WithThemePlayground = /** @class */ (function (_super) {
    __extends(WithThemePlayground, _super);
    function WithThemePlayground() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = Array.isArray(_this.props.theme)
            ? _this.props.theme[0].theme
            : _this.props.theme;
        _this.channel = addons.getChannel();
        _this.handleReset = function () {
            var _a = _this.props, theme = _a.theme, config = _a.config, overrides = _a.overrides;
            return _this.channel.emit(events.resetOptions, { theme: theme, config: config, overrides: overrides });
        };
        return _this;
    }
    WithThemePlayground.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, theme = _a.theme, config = _a.config, overrides = _a.overrides;
        this.channel.on(events.updateTheme, function (t) { return _this.setState(t); });
        this.channel.on(events.reset, this.handleReset);
        this.channel.emit(events.receiveOptions, { theme: theme, config: config, overrides: overrides });
    };
    WithThemePlayground.prototype.componentWillUnmount = function () {
        var _this = this;
        this.channel.removeListener(events.updateTheme, function (t) { return _this.setState(t); });
        this.channel.removeListener(events.reset, this.handleReset);
    };
    WithThemePlayground.prototype.render = function () {
        var ThemeProvider = this.props.provider;
        return (React.createElement(ThemeProvider, { theme: this.state }, this.props.children));
    };
    return WithThemePlayground;
}(React.Component));
export { WithThemePlayground };
export var withThemePlayground = function (props) {
    if (!props.provider) {
        throw Error('Missing ThemeProvider in withThemePlayground decorator options.');
    }
    if (!props.theme) {
        throw Error('Missing theme key in withThemePlayground decorator options.');
    }
    return function (storyFn) { return (React.createElement(WithThemePlayground, { theme: props.theme, provider: props.provider, config: props.config, overrides: props.overrides }, storyFn())); };
};
