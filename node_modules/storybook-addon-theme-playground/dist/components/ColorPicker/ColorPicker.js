import React, { useState, useRef, useEffect } from 'react';
import { ChromePicker } from 'react-color';
import StyledColorPicker from './ColorPicker.style';
import Label from '../Label/Label';
var ColorPicker = function (_a) {
    var iconBefore = _a.iconBefore, description = _a.description, label = _a.label, onChange = _a.onChange, value = _a.value;
    var _b = useState(false), visible = _b[0], setVisible = _b[1];
    var content = useRef(null);
    var handleOutsideClick = function (e) {
        if (content.current && !content.current.contains(e.target) && visible)
            setVisible(false);
    };
    useEffect(function () {
        window.addEventListener('mousedown', handleOutsideClick);
        return function () {
            window.removeEventListener('mousedown', handleOutsideClick);
        };
    }, [event, handleOutsideClick]);
    var handleChange = function (_a) {
        var hex = _a.hex, rgb = _a.rgb;
        if (onChange) {
            var newColor = hex;
            if (rgb.a < 1) {
                newColor = "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")";
            }
            onChange(newColor);
        }
    };
    return (React.createElement(StyledColorPicker, null,
        React.createElement(Label, { iconBefore: iconBefore, label: label, description: description }),
        React.createElement("div", { className: "colorPicker__wrapper" },
            React.createElement("button", { type: "button", onClick: function () { return setVisible(function (prev) { return !prev; }); }, "aria-label": "Open color picker", className: "colorPicker__open" },
                React.createElement("span", { style: { background: value } })),
            visible && (React.createElement(React.Fragment, null,
                React.createElement("button", { type: "button", onClick: function () { return setVisible(false); }, "aria-label": "Close color picker", className: "colorPicker__cover" }),
                React.createElement("div", { className: "colorPicker__content", ref: content },
                    React.createElement(ChromePicker, { color: value, onChangeComplete: handleChange })))))));
};
export default ColorPicker;
