var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import StyledShorthand from './Shorthand.style';
import Label from '../Label/Label';
var Shorthand = function (_a) {
    var label = _a.label, description = _a.description, value = _a.value, onChange = _a.onChange, iconBefore = _a.iconBefore;
    var top = value.top, left = value.left, right = value.right, bottom = value.bottom;
    var updateValue = function (key, val) {
        var _a;
        var newValue = __assign(__assign({}, value), (_a = {}, _a[key] = val, _a));
        onChange(newValue);
    };
    var handleChange = function (event) {
        var _a = event.target, eventValue = _a.value, name = _a.name;
        if (eventValue !== '') {
            updateValue(name, parseFloat(eventValue));
        }
        else {
            updateValue(name, 0);
        }
    };
    return (React.createElement(StyledShorthand, null,
        React.createElement(Label, { iconBefore: iconBefore, label: label, description: description }),
        React.createElement("div", { className: "shorthand__shorthand" },
            React.createElement("input", { type: "text", pattern: "[0-9.]*", value: top, name: "top", onChange: handleChange, onBlur: handleChange }),
            React.createElement("input", { type: "text", pattern: "[0-9.]*", value: right, name: "right", onChange: handleChange, onBlur: handleChange }),
            React.createElement("input", { type: "text", pattern: "[0-9.]*", value: bottom, name: "bottom", onChange: handleChange, onBlur: handleChange }),
            React.createElement("input", { type: "text", pattern: "[0-9.]*", value: left, name: "left", onChange: handleChange, onBlur: handleChange }))));
};
export default Shorthand;
