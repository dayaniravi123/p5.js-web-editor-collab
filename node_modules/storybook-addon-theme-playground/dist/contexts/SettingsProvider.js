var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useState, useEffect, useCallback, createContext } from 'react';
import { updateValueBasedOnPath } from '../helper';
import events from '../events';
import buildThemeComponents from '../helper/buildThemeComponents';
var defaultConfig = {
    labelFormat: 'startCase',
    debounce: true,
    debounceRate: 500,
    showCode: true,
};
var defaultProps = {
    themes: [{ name: 'Default', theme: {} }],
    themeComponents: {},
    activeTheme: { name: '__default', theme: {} },
    overrides: {},
    config: defaultConfig,
    isLoading: false,
    updateTheme: function () { },
    updateActiveTheme: function () { },
    resetThemes: function () { },
};
export var SettingsContext = createContext(defaultProps);
var SettingsProvider = function (_a) {
    var api = _a.api, children = _a.children;
    var _b = useState({}), themeComponents = _b[0], setThemeComponents = _b[1];
    var _c = useState([]), themes = _c[0], setThemes = _c[1];
    var _d = useState({
        name: '',
        theme: {},
    }), activeTheme = _d[0], setActiveTheme = _d[1];
    var _e = useState(false), isMounted = _e[0], setIsMounted = _e[1];
    var _f = useState(false), isLoading = _f[0], setIsLoading = _f[1];
    var _g = useState({}), overrides = _g[0], setOverrides = _g[1];
    var _h = useState(defaultConfig), config = _h[0], setConfig = _h[1];
    useEffect(function () {
        if (config.debounce && isMounted && activeTheme.theme) {
            var timeout_1 = setTimeout(function () {
                setIsLoading(false);
                api.emit(events.updateTheme, activeTheme.theme);
            }, config.debounceRate);
            return function () {
                setIsLoading(true);
                clearTimeout(timeout_1);
            };
        }
        else {
            if (isLoading) {
                setIsLoading(false);
            }
            api.emit(events.updateTheme, activeTheme.theme);
        }
    }, [activeTheme]);
    var updateThemeComponents = function (theme, overrides) {
        var components = {};
        if (Array.isArray(theme)) {
            theme.forEach(function (_a) {
                var name = _a.name, theme = _a.theme;
                components[name] = buildThemeComponents(theme, overrides);
            });
        }
        else {
            components.__default = buildThemeComponents(theme, overrides);
        }
        setThemeComponents(components);
    };
    var getInitialOptions = useCallback(function (options) {
        var theme = options.theme, overrides = options.overrides, config = options.config;
        updateThemeComponents(theme, overrides || {});
        if (Array.isArray(theme)) {
            setThemes(theme);
            setActiveTheme(__assign({}, theme[0]));
        }
        else {
            setActiveTheme({ name: '__default', theme: theme });
        }
        if (overrides)
            setOverrides(overrides);
        if (config)
            setConfig(function (prev) { return (__assign(__assign({}, prev), config)); });
    }, []);
    useEffect(function () {
        api.on(events.receiveOptions, getInitialOptions);
        api.on(events.resetOptions, getInitialOptions);
        setIsMounted(true);
        return function () {
            api.off(events.receiveOptions, getInitialOptions);
            api.off(events.resetOptions, getInitialOptions);
            setIsMounted(false);
        };
    }, []);
    var updateTheme = useCallback(function (path, value) {
        var theme = activeTheme.theme, name = activeTheme.name;
        // Update theme object value based on path and set active theme state
        var newTheme = theme;
        updateValueBasedOnPath(path, value, newTheme);
        setActiveTheme({ name: name, theme: newTheme });
        // Set new theme components state
        setThemeComponents(function (prev) {
            var _a, _b;
            return (__assign(__assign({}, prev), (_a = {}, _a[name] = __assign(__assign({}, prev[name]), (_b = {}, _b[path] = { type: prev[name][path].type, value: value }, _b)), _a)));
        });
    }, [activeTheme]);
    var updateActiveTheme = useCallback(function (_a) {
        var name = _a.name, theme = _a.theme;
        setActiveTheme({ name: name, theme: theme });
    }, [activeTheme.theme]);
    var providerValue = {
        activeTheme: activeTheme,
        themes: themes,
        themeComponents: themeComponents,
        config: config,
        overrides: overrides,
        updateTheme: updateTheme,
        updateActiveTheme: updateActiveTheme,
        isLoading: isLoading,
        resetThemes: function () { return api.emit(events.reset); },
    };
    return (React.createElement(SettingsContext.Provider, { value: providerValue }, children));
};
export var SettingsConsumer = SettingsContext.Consumer;
export default SettingsProvider;
